---
title: "Renewable Power Plants in Europe"
author: "Max NÃ¶lscher"
format: html
execute: 
  warning: false
toc: true
toc-location: left
toc-title: Contents
code-fold: true
filters:
   - lightbox
lightbox: auto
editor: visual
---

# Packages

```{r}
library(here)
library(sf)
library(janitor)
library(ggdark)
library(ggtext)
library(cowplot)
library(biscale)
library(showtext)
library(tsibble)
library(tidyverse)
```

Add font for data visualizations

```{r}
showtext_auto()

font_add_google("Roboto Mono")
font_add(family = "fa-solid", "fonts/Font Awesome 6 Free-Solid-900.otf")
```

# Data

## Import

### Power Plants

The data on renewable production sites is downloaded from [Open Energy Modelling Initiative](https://data.open-power-system-data.org/renewable_power_plants/)

```{r}
data_plants <- read_csv("data/renewable_power_plants_EU.csv")
```

### NUTS Regions

The NUTS regions data is downloaded from [eurostat](https://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units/nuts).

```{r}
regions <- here("data", "NUTS_regions", "NUTS_RG_01M_2021_4326.shp") |> 
  read_sf() |> 
  janitor::clean_names() |> 
  filter(
    cntr_code == "DE",
    levl_code == 3
    ) |> 
  select(nuts_id, nuts_name, urbn_type)
```

## Cleaning

Drop unwanted columns

```{r}
data_plants <- data_plants |> 
  select(
    -contains("nuts_"),
    nuts_3_region,
    -geographical_resolution, 
    -technology
    )
```

Clean column names

```{r}
data_plants <- data_plants |> 
  clean_names()
```

```{r}
data_solwind <- data_plants |> 
  filter(energy_source_level_2 == "Wind" |
           energy_source_level_2 == "Solar") |> 
  drop_na(lon, lat)
```

## Overview

First overview of the data

```{r}
data_solwind |> 
  skimr::skim()
```

```{r}
data_plants |> 
  ggplot(aes(y = forcats::fct_infreq(energy_source_level_2))) +
  geom_histogram(stat = "count", fill = "steelblue", alpha = .6) +
  theme_minimal() +
  labs(y = "")
```

```{r}
data_solwind |> 
  ggplot(aes(y = forcats::fct_infreq(country))) +
  geom_histogram(stat = "count", fill = "steelblue", alpha = .6) +
  theme_minimal() +
  labs(y = "")
```

## Preparation

Convert to sf object

```{r}
data_solwind_sf <- data_solwind |> 
st_as_sf(coords = c("lon", "lat")) |> 
  st_sf(crs = 4326)
```

```{r}
data_solwind_de <- data_solwind_sf |>
  filter(country == "DE") |> 
  slice_sample(n = 5000)
```

# EDA

Get impression of data spatially for a small random subset

```{r}
data_solwind_de |> 
  ggplot(aes(colour = energy_source_level_2)) +
  geom_sf() +
  coord_sf()
```

## Plot Energy Capacity over Time for Germany

```{r}
data_solwind_de |> 
  as_tibble() |> 
  mutate(year = lubridate::year(commissioning_date)) |> 
  group_by(year, energy_source_level_2) |> 
  summarise(
    annual_built_capacity = sum(electrical_capacity, na.rm = TRUE),
    .groups = "drop"
    ) |>
  arrange(year) |> 
  mutate(annual_built_capacity_cum = cumsum(annual_built_capacity)) |> 
  ggplot(
    aes(
      year, 
      annual_built_capacity, 
      colour = energy_source_level_2)
    ) +
  geom_area(
    aes(
      year,
      annual_built_capacity_cum,
      fill = energy_source_level_2
    ),
    colour = NA,
    alpha = .3,
    show.legend = FALSE
  ) +
  geom_line(show.legend = FALSE) +
  scale_x_continuous(
    minor_breaks = scales::breaks_pretty(40),
    breaks = scales::breaks_pretty(10),
    ) +
  facet_wrap(~energy_source_level_2, ncol = 1) +
  theme_minimal() +
  theme(
    text = element_text(family = "Roboto Mono"),
    plot.title = element_markdown(face = "bold", lineheight = 1.1),
    plot.subtitle = element_markdown(lineheight = 1.1),
    strip.background = element_blank(),
    strip.text.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  labs(
    x = "Year",
    title = "**Wind and Solar Power Plant Capacity in Germany over Time**",
    subtitle = "Installed electrical capacity in MW for <span style='color:#F8766D;font-family:fa-solid'>&#xf185;</span> and
    <span style='color:#00BFC4;font-family:fa-solid'>&#xf72e;</span> production sites"
  )
```

```{r}
data_solwind_de_nuts <- data_solwind_de |>
  st_drop_geometry() |> 
  group_by(nuts_3_region, energy_source_level_2) |> 
  summarise(
    total_electric_capacity = sum(electrical_capacity, na.rm = TRUE), 
    .groups = "drop")
```

Expand data to make 0 capacity in NUTS region explicit.

```{r}
data_solwind_de_nuts <- data_solwind_de_nuts |> 
  expand(nuts_3_region, energy_source_level_2) |> 
  left_join(data_solwind_de_nuts, by = c("nuts_3_region", "energy_source_level_2")) |> 
  mutate(total_electric_capacity = replace_na(total_electric_capacity, 0))
```

Join data with NUTS regions

```{r}
data_solwind_de_nuts <- data_solwind_de_nuts |> 
  st_drop_geometry() |> 
  left_join(regions, by = c("nuts_3_region" = "nuts_id")) |> 
  st_as_sf()
```

Calculate total electric capacity per area

```{r}
data_solwind_de_nuts <-
  data_solwind_de_nuts |> 
  mutate(total_electric_capacity_norm = total_electric_capacity / as.numeric(st_area(geometry)) * 1E6)
```

## Plot Bivariate Wind \~ Solar

```{r}

data_solwind_de_nuts_bi <-
  data_solwind_de_nuts |> 
  pivot_wider(
    names_from = "energy_source_level_2",
    values_from = "total_electric_capacity_norm"
    ) |> 
    mutate(across(all_of(c("Solar", "Wind")), replace_na, 0)) |>
  filter(urbn_type != 1) |> 
  select(Wind, Solar) |>
  bi_class(
  x = Solar, 
  y = Wind, 
  style = "fisher", 
  dim = 3
  )
```

```{r}
plot_biscale <- data_solwind_de_nuts_bi |> 
  ggplot() +
  geom_sf(aes(fill = bi_class), color = "white", size = 0.1, show.legend = FALSE) +
  bi_scale_fill(pal = "GrPink", dim = 3) +
  labs(
    title = "sdf",
    subtitle = "sdfsdd"
  ) +
  bi_theme()

legend <- bi_legend(pal = "GrPink",
                    dim = 3,
                    xlab = "More Solar",
                    ylab = "More Wind",
                    size = 8)

ggdraw() +
  draw_plot(plot_biscale, 0, 0, 1, 1) +
  draw_plot(legend, 0.2, .65, 0.2, 0.2)
```

## Plot Separate Maps

```{r}
make_quantile_trans <- function(x, format = scales::label_number()) {
  name <- paste0("quantiles_of_", deparse1(substitute(x)))
  xs <- sort(x)
  N <- length(xs)
  transform <- function(x) findInterval(x, xs)/N # find the last element that is smaller
  inverse <- function(q) xs[1+floor(q*(N-1))]

  scales::trans_new(
    name = name,
    transform = transform,
    inverse = inverse,
    breaks =  function(x, n = 5) inverse(scales::extended_breaks()(transform(x), n)),
    minor_breaks = function(x, n = 5) inverse(scales::regular_minor_breaks()(transform(x), n)),
    format = format,
    domain = xs[c(1, N)]
  )
}
```

Create labeller for inline icons in facet labels

```{r}
icon_labels <- c(
  Wind = "<span style='font-family:fa-solid'>&#xf72e;</span>",
  Solar = "<span style='font-family:fa-solid'>&#xf185;</span>"
) |> 
  as_labeller()
```

```{r}
data_solwind_de_nuts |>
  filter(!is.na(energy_source_level_2)) |>
  # filter(total_electric_capacity_norm <= 0.001) |>
  # ggplot(aes(total_electric_capacity_norm)) + geom_histogram()
  ggplot(
    aes(fill = total_electric_capacity_norm * 1E3)) +
  geom_sf(colour = NA) +
  # scale_fill_viridis_c(na.value = "grey", break) +
  scale_fill_viridis_b(n.breaks=6, option = "plasma", trans = make_quantile_trans(data_solwind_de_nuts$total_electric_capacity_norm * 1E3),
                    guide = guide_coloursteps(
      direction = "horizontal",
      barheight = unit(2, units = "mm"),
      barwidth = unit(150, units = "mm"),
      draw.ulim = F,
      title.position = 'top',
      # some shifting aroundguide_colorbar
      title.hjust = 0.5
      # label.hjust = 0.5
  )) +
  facet_wrap(~energy_source_level_2, labeller = icon_labels) +
  theme_void() +
  theme(
    text = element_text(family = "Roboto Mono"),
    plot.title = element_markdown(face = "bold", lineheight = 1.1),
    legend.title = element_markdown(),
    legend.position = "bottom",
    legend.spacing.x = unit(1.0, 'cm'),
    strip.text = element_markdown(size = 20)
    ) +
  labs(
    title = "Electric Capacity in German regions for Solar and Wind power plants",
    fill = "KW per km^2"
  )
```

# Timeseries

## Data

### Import

Data available for download in 2 year periods from [SMARD](https://www.smard.de/home/downloadcenter/download-marktdaten#!?downloadAttributes=%7B%22selectedCategory%22:false,%22selectedSubCategory%22:false,%22selectedRegion%22:false,%22from%22:1659909600000,%22to%22:1660859999999,%22selectedFileType%22:false%7D).

```{r}
data_power_prod_ts <- here("data", "timeseries") |> 
  list.files(full.names = TRUE) |> 
  map(read_delim, col_types = "ctcccccccccccc", delim = ";", locale = locale(decimal_mark = ",", grouping_mark = ".")) |> 
  reduce(bind_rows) |> 
  clean_names()
```

### Preparation

```{r}
data_power_prod_ts <- data_power_prod_ts |> 
  mutate(across(contains("m_wh"), str_remove, "\\.")) |> 
  mutate(across(contains("m_wh"), as.numeric)) |> 
  mutate(
    date = lubridate::dmy_hms(str_c(datum, uhrzeit, sep = "_")),
    .before = 1) |>
  select(-datum, -uhrzeit) |> 
  distinct(date, .keep_all = TRUE) |> 
  arrange(date)
```

Check if we have implicit missing dates

```{r}
data_power_prod_ts |>
  select(date) |> 
  mutate(date_lag = lag(date)) |> 
  drop_na(everything()) |> 
  mutate(diff = as.numeric(date - date_lag)) |>
  group_by(diff) |> 
  summarise(n = n())
```

This means that there are 6 data gaps with \$75 - 15 / 15 = `r 75 - 15 / 15`$ missing rows per data gap.

```{r}
data_power_prod_ts <- data_power_prod_ts |> 
  as_tsibble(index = date) |> 
  fill_gaps() |> 
  as_tibble()
```

```{r}
data_power_prod_ts_long <- data_power_prod_ts |> 
  pivot_longer(cols = -"date")
```

## Visualize Timeseries

### Annual Pattern

#### 1

```{r}
data_power_prod_ts_long |>
  mutate(yearday = lubridate::yday(date)) |>
  group_by(yearday, name) |>
  summarise(value = mean(value, na.rm = TRUE)) |>
  ggplot() +
  aes(yearday, name, fill = value) +
  geom_tile() +
  theme_minimal() +
  scale_fill_viridis_c()
```

#### 2

```{r}
data_power_prod_ts_long |>
  mutate(
    month = lubridate::month(date),
    monthday = lubridate::mday(date)
  ) |>
  group_by(month, monthday, name) |>
  summarise(value = mean(value, na.rm = TRUE)) |>
  # mutate(month = month.abb[as.integer(month)]) |>
  ggplot() +
  aes(monthday, month, fill = value) +
  geom_tile() +
  scale_y_reverse() +
  scale_y_continuous(breaks = 1:12, labels = ~month.abb) +
  theme_minimal() +
  scale_fill_viridis_c() +
  facet_wrap(~name)
```

#### 3

```{r}
data_power_prod_ts_long |>
  mutate(yearweek = lubridate::week(date)) |>
  group_by(yearweek, name) |>
  summarise(value = mean(value, na.rm = TRUE)) |> 
  # ungroup() |> distinct(name) |> pull(name)
  filter(!name %in% c("sonstige_erneuerbare_m_wh", "sonstige_konventionelle_m_wh")) |> 
  # mutate(value_norm = value / sum(value, na.rm = TRUE)) |> 
  ggplot(aes(yearweek, value, group = name, fill = name)) +
  # geom_area(position = "stack") +
  ggstream::geom_stream(type = "proportional") +
  scale_fill_manual(
    values = hues::iwanthue(10),
    labels = ~str_remove(.x, "_m_wh") |> 
      str_to_title() |> 
      str_replace("_", " ")
    ) +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_x_continuous(
    breaks = seq(5, 52, 5),
    minor_breaks = 1:52) +
  ggdark::dark_theme_minimal() +
  theme(
    text = element_text(family = "Roboto Mono"),
    legend.title = element_blank(),
    axis.title.y = element_blank()
    ) +
  labs(
    fill = "",
    x = "Week of the year",
    )
```

```{r}
data_power_prod_ts_long |>
  mutate(weekday = lubridate::wday(date, label = TRUE, abbr = TRUE)) |>
  group_by(weekday, name) |>
  summarise(value = mean(value, na.rm = TRUE)) |> 
  # ungroup() |> distinct(name) |> pull(name)
  filter(!name %in% c("sonstige_erneuerbare_m_wh", "sonstige_konventionelle_m_wh")) |> 
  # mutate(value_norm = value / sum(value, na.rm = TRUE)) |> 
  ggplot(aes(weekday, value, group = name, fill = name)) +
  # geom_area(position = "stack") +
  ggstream::geom_stream(type = "proportional") +
  scale_fill_manual(
    values = hues::iwanthue(10),
    labels = ~str_remove(.x, "_m_wh") |> 
      str_to_title() |> 
      str_replace("_", " ")
    ) +
  scale_y_continuous(labels = scales::percent_format()) +
  # scale_x_continuous(
  #   breaks = 1:7
  #   ) +
  ggdark::dark_theme_minimal() +
  theme(
    text = element_text(family = "Roboto Mono"),
    legend.title = element_blank(),
    axis.title.y = element_blank()
    ) +
  labs(
    fill = "",
    x = "Day of the week",
    )
```

```{r}
data_power_prod_ts_long |>
  mutate(dayhour = lubridate::hour(date)) |>
  group_by(dayhour, name) |>
  summarise(value = mean(value, na.rm = TRUE)) |> 
  # ungroup() |> distinct(name) |> pull(name)
  filter(!name %in% c("sonstige_erneuerbare_m_wh", "sonstige_konventionelle_m_wh")) |> 
  # mutate(value_norm = value / sum(value, na.rm = TRUE)) |> 
  ggplot(aes(dayhour, value, group = name, fill = name)) +
  # geom_area(position = "stack") +
  ggstream::geom_stream(type = "proportional") +
  scale_fill_manual(
    values = hues::iwanthue(10),
    labels = ~str_remove(.x, "_m_wh") |> 
      str_to_title() |> 
      str_replace("_", " ")
    ) +
  scale_y_continuous(labels = scales::percent_format()) +
  # scale_x_continuous(
  #   breaks = 1:7
  #   ) +
  ggdark::dark_theme_minimal() +
  theme(
    text = element_text(family = "Roboto Mono"),
    legend.title = element_blank(),
    axis.title.y = element_blank()
    ) +
  labs(
    fill = "",
    x = "Day of the week",
    )
```
